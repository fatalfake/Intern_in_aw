// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynamic_obstacle.proto

#include "dynamic_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dynamic_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DynamicObstacleState_dynamic_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dynamic_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynamicObstacleState_Point_dynamic_5fobstacle_2eproto;
namespace aw_simulation_obstacle {
class DynamicObstacleState_PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynamicObstacleState_Point> _instance;
} _DynamicObstacleState_Point_default_instance_;
class DynamicObstacleStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynamicObstacleState> _instance;
} _DynamicObstacleState_default_instance_;
class DynamicObstacleStateListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynamicObstacleStateList> _instance;
} _DynamicObstacleStateList_default_instance_;
}  // namespace aw_simulation_obstacle
static void InitDefaultsscc_info_DynamicObstacleState_dynamic_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aw_simulation_obstacle::_DynamicObstacleState_default_instance_;
    new (ptr) ::aw_simulation_obstacle::DynamicObstacleState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aw_simulation_obstacle::DynamicObstacleState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DynamicObstacleState_dynamic_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DynamicObstacleState_dynamic_5fobstacle_2eproto}, {
      &scc_info_DynamicObstacleState_Point_dynamic_5fobstacle_2eproto.base,}};

static void InitDefaultsscc_info_DynamicObstacleState_Point_dynamic_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aw_simulation_obstacle::_DynamicObstacleState_Point_default_instance_;
    new (ptr) ::aw_simulation_obstacle::DynamicObstacleState_Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aw_simulation_obstacle::DynamicObstacleState_Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynamicObstacleState_Point_dynamic_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DynamicObstacleState_Point_dynamic_5fobstacle_2eproto}, {}};

static void InitDefaultsscc_info_DynamicObstacleStateList_dynamic_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aw_simulation_obstacle::_DynamicObstacleStateList_default_instance_;
    new (ptr) ::aw_simulation_obstacle::DynamicObstacleStateList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aw_simulation_obstacle::DynamicObstacleStateList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DynamicObstacleStateList_dynamic_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DynamicObstacleStateList_dynamic_5fobstacle_2eproto}, {
      &scc_info_DynamicObstacleState_dynamic_5fobstacle_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dynamic_5fobstacle_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dynamic_5fobstacle_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dynamic_5fobstacle_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dynamic_5fobstacle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState_Point, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState_Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState_Point, x_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState_Point, y_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState_Point, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState, nsecs_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState, robot_x_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState, robot_y_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState, robot_z_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState, polygon_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState, relative_velo_x_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState, relative_velo_y_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState, relative_velo_z_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState, relative_acc_x_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState, relative_acc_y_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState, relative_acc_z_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState, object_type_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleState, points_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleStateList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleStateList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleStateList, id_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleStateList, x_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleStateList, y_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleStateList, yaw_),
  PROTOBUF_FIELD_OFFSET(::aw_simulation_obstacle::DynamicObstacleStateList, dynamic_obstacle_state_),
  0,
  1,
  2,
  3,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::aw_simulation_obstacle::DynamicObstacleState_Point)},
  { 11, 29, sizeof(::aw_simulation_obstacle::DynamicObstacleState)},
  { 42, 52, sizeof(::aw_simulation_obstacle::DynamicObstacleStateList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aw_simulation_obstacle::_DynamicObstacleState_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aw_simulation_obstacle::_DynamicObstacleState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aw_simulation_obstacle::_DynamicObstacleStateList_default_instance_),
};

const char descriptor_table_protodef_dynamic_5fobstacle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026dynamic_obstacle.proto\022\026aw_simulation_"
  "obstacle\"\263\003\n\024DynamicObstacleState\022\r\n\005nse"
  "cs\030\001 \002(\004\022\017\n\007robot_x\030\002 \002(\001\022\017\n\007robot_y\030\003 \002"
  "(\001\022\017\n\007robot_z\030\004 \002(\001\022C\n\007polygon\030\005 \003(\01322.a"
  "w_simulation_obstacle.DynamicObstacleSta"
  "te.Point\022\027\n\017relative_velo_x\030\006 \001(\001\022\027\n\017rel"
  "ative_velo_y\030\007 \001(\001\022\027\n\017relative_velo_z\030\010 "
  "\001(\001\022\026\n\016relative_acc_x\030\t \001(\001\022\026\n\016relative_"
  "acc_y\030\n \001(\001\022\026\n\016relative_acc_z\030\013 \001(\001\022\023\n\013o"
  "bject_type\030\014 \001(\005\022B\n\006points\030\r \003(\01322.aw_si"
  "mulation_obstacle.DynamicObstacleState.P"
  "oint\032(\n\005Point\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z"
  "\030\003 \002(\001\"\227\001\n\030DynamicObstacleStateList\022\n\n\002i"
  "d\030\001 \002(\004\022\t\n\001x\030\002 \002(\001\022\t\n\001y\030\003 \002(\001\022\013\n\003yaw\030\004 \002"
  "(\001\022L\n\026dynamic_obstacle_state\030\005 \003(\0132,.aw_"
  "simulation_obstacle.DynamicObstacleState"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dynamic_5fobstacle_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dynamic_5fobstacle_2eproto_sccs[3] = {
  &scc_info_DynamicObstacleState_dynamic_5fobstacle_2eproto.base,
  &scc_info_DynamicObstacleState_Point_dynamic_5fobstacle_2eproto.base,
  &scc_info_DynamicObstacleStateList_dynamic_5fobstacle_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dynamic_5fobstacle_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dynamic_5fobstacle_2eproto = {
  false, false, descriptor_table_protodef_dynamic_5fobstacle_2eproto, "dynamic_obstacle.proto", 640,
  &descriptor_table_dynamic_5fobstacle_2eproto_once, descriptor_table_dynamic_5fobstacle_2eproto_sccs, descriptor_table_dynamic_5fobstacle_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_dynamic_5fobstacle_2eproto::offsets,
  file_level_metadata_dynamic_5fobstacle_2eproto, 3, file_level_enum_descriptors_dynamic_5fobstacle_2eproto, file_level_service_descriptors_dynamic_5fobstacle_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dynamic_5fobstacle_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dynamic_5fobstacle_2eproto)), true);
namespace aw_simulation_obstacle {

// ===================================================================

void DynamicObstacleState_Point::InitAsDefaultInstance() {
}
class DynamicObstacleState_Point::_Internal {
 public:
  using HasBits = decltype(std::declval<DynamicObstacleState_Point>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

DynamicObstacleState_Point::DynamicObstacleState_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aw_simulation_obstacle.DynamicObstacleState.Point)
}
DynamicObstacleState_Point::DynamicObstacleState_Point(const DynamicObstacleState_Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:aw_simulation_obstacle.DynamicObstacleState.Point)
}

void DynamicObstacleState_Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

DynamicObstacleState_Point::~DynamicObstacleState_Point() {
  // @@protoc_insertion_point(destructor:aw_simulation_obstacle.DynamicObstacleState.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DynamicObstacleState_Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DynamicObstacleState_Point::ArenaDtor(void* object) {
  DynamicObstacleState_Point* _this = reinterpret_cast< DynamicObstacleState_Point* >(object);
  (void)_this;
}
void DynamicObstacleState_Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DynamicObstacleState_Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynamicObstacleState_Point& DynamicObstacleState_Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynamicObstacleState_Point_dynamic_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void DynamicObstacleState_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:aw_simulation_obstacle.DynamicObstacleState.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DynamicObstacleState_Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicObstacleState_Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aw_simulation_obstacle.DynamicObstacleState.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aw_simulation_obstacle.DynamicObstacleState.Point)
  return target;
}

size_t DynamicObstacleState_Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aw_simulation_obstacle.DynamicObstacleState.Point)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_z()) {
    // required double z = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t DynamicObstacleState_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aw_simulation_obstacle.DynamicObstacleState.Point)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double z = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicObstacleState_Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aw_simulation_obstacle.DynamicObstacleState.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicObstacleState_Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynamicObstacleState_Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aw_simulation_obstacle.DynamicObstacleState.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aw_simulation_obstacle.DynamicObstacleState.Point)
    MergeFrom(*source);
  }
}

void DynamicObstacleState_Point::MergeFrom(const DynamicObstacleState_Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aw_simulation_obstacle.DynamicObstacleState.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DynamicObstacleState_Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aw_simulation_obstacle.DynamicObstacleState.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicObstacleState_Point::CopyFrom(const DynamicObstacleState_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aw_simulation_obstacle.DynamicObstacleState.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicObstacleState_Point::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DynamicObstacleState_Point::InternalSwap(DynamicObstacleState_Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DynamicObstacleState_Point, z_)
      + sizeof(DynamicObstacleState_Point::z_)
      - PROTOBUF_FIELD_OFFSET(DynamicObstacleState_Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicObstacleState_Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DynamicObstacleState::InitAsDefaultInstance() {
}
class DynamicObstacleState::_Internal {
 public:
  using HasBits = decltype(std::declval<DynamicObstacleState>()._has_bits_);
  static void set_has_nsecs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_robot_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_robot_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_robot_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_relative_velo_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_relative_velo_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_relative_velo_z(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_relative_acc_x(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_relative_acc_y(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_relative_acc_z(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_object_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

DynamicObstacleState::DynamicObstacleState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  polygon_(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aw_simulation_obstacle.DynamicObstacleState)
}
DynamicObstacleState::DynamicObstacleState(const DynamicObstacleState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      polygon_(from.polygon_),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nsecs_, &from.nsecs_,
    static_cast<size_t>(reinterpret_cast<char*>(&object_type_) -
    reinterpret_cast<char*>(&nsecs_)) + sizeof(object_type_));
  // @@protoc_insertion_point(copy_constructor:aw_simulation_obstacle.DynamicObstacleState)
}

void DynamicObstacleState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DynamicObstacleState_dynamic_5fobstacle_2eproto.base);
  ::memset(&nsecs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_type_) -
      reinterpret_cast<char*>(&nsecs_)) + sizeof(object_type_));
}

DynamicObstacleState::~DynamicObstacleState() {
  // @@protoc_insertion_point(destructor:aw_simulation_obstacle.DynamicObstacleState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DynamicObstacleState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DynamicObstacleState::ArenaDtor(void* object) {
  DynamicObstacleState* _this = reinterpret_cast< DynamicObstacleState* >(object);
  (void)_this;
}
void DynamicObstacleState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DynamicObstacleState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynamicObstacleState& DynamicObstacleState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynamicObstacleState_dynamic_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void DynamicObstacleState::Clear() {
// @@protoc_insertion_point(message_clear_start:aw_simulation_obstacle.DynamicObstacleState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_.Clear();
  points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&nsecs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relative_acc_x_) -
        reinterpret_cast<char*>(&nsecs_)) + sizeof(relative_acc_x_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&relative_acc_y_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&object_type_) -
        reinterpret_cast<char*>(&relative_acc_y_)) + sizeof(object_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DynamicObstacleState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 nsecs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nsecs(&has_bits);
          nsecs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double robot_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_robot_x(&has_bits);
          robot_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double robot_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_robot_y(&has_bits);
          robot_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double robot_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_robot_z(&has_bits);
          robot_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .aw_simulation_obstacle.DynamicObstacleState.Point polygon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double relative_velo_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_relative_velo_x(&has_bits);
          relative_velo_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double relative_velo_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_relative_velo_y(&has_bits);
          relative_velo_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double relative_velo_z = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_relative_velo_z(&has_bits);
          relative_velo_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double relative_acc_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_relative_acc_x(&has_bits);
          relative_acc_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double relative_acc_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_relative_acc_y(&has_bits);
          relative_acc_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double relative_acc_z = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_relative_acc_z(&has_bits);
          relative_acc_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 object_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_object_type(&has_bits);
          object_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aw_simulation_obstacle.DynamicObstacleState.Point points = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicObstacleState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aw_simulation_obstacle.DynamicObstacleState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 nsecs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_nsecs(), target);
  }

  // required double robot_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_robot_x(), target);
  }

  // required double robot_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_robot_y(), target);
  }

  // required double robot_z = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_robot_z(), target);
  }

  // repeated .aw_simulation_obstacle.DynamicObstacleState.Point polygon = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygon_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_polygon(i), target, stream);
  }

  // optional double relative_velo_x = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_relative_velo_x(), target);
  }

  // optional double relative_velo_y = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_relative_velo_y(), target);
  }

  // optional double relative_velo_z = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_relative_velo_z(), target);
  }

  // optional double relative_acc_x = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_relative_acc_x(), target);
  }

  // optional double relative_acc_y = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_relative_acc_y(), target);
  }

  // optional double relative_acc_z = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_relative_acc_z(), target);
  }

  // optional int32 object_type = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_object_type(), target);
  }

  // repeated .aw_simulation_obstacle.DynamicObstacleState.Point points = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aw_simulation_obstacle.DynamicObstacleState)
  return target;
}

size_t DynamicObstacleState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aw_simulation_obstacle.DynamicObstacleState)
  size_t total_size = 0;

  if (_internal_has_nsecs()) {
    // required uint64 nsecs = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nsecs());
  }

  if (_internal_has_robot_x()) {
    // required double robot_x = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_robot_y()) {
    // required double robot_y = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_robot_z()) {
    // required double robot_z = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t DynamicObstacleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aw_simulation_obstacle.DynamicObstacleState)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 nsecs = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nsecs());

    // required double robot_x = 2;
    total_size += 1 + 8;

    // required double robot_y = 3;
    total_size += 1 + 8;

    // required double robot_z = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aw_simulation_obstacle.DynamicObstacleState.Point polygon = 5;
  total_size += 1UL * this->_internal_polygon_size();
  for (const auto& msg : this->polygon_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aw_simulation_obstacle.DynamicObstacleState.Point points = 13;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f0u) {
    // optional double relative_velo_x = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double relative_velo_y = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double relative_velo_z = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double relative_acc_x = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double relative_acc_y = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double relative_acc_z = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional int32 object_type = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_object_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicObstacleState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aw_simulation_obstacle.DynamicObstacleState)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicObstacleState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynamicObstacleState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aw_simulation_obstacle.DynamicObstacleState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aw_simulation_obstacle.DynamicObstacleState)
    MergeFrom(*source);
  }
}

void DynamicObstacleState::MergeFrom(const DynamicObstacleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aw_simulation_obstacle.DynamicObstacleState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_.MergeFrom(from.polygon_);
  points_.MergeFrom(from.points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      nsecs_ = from.nsecs_;
    }
    if (cached_has_bits & 0x00000002u) {
      robot_x_ = from.robot_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      robot_y_ = from.robot_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      robot_z_ = from.robot_z_;
    }
    if (cached_has_bits & 0x00000010u) {
      relative_velo_x_ = from.relative_velo_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      relative_velo_y_ = from.relative_velo_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      relative_velo_z_ = from.relative_velo_z_;
    }
    if (cached_has_bits & 0x00000080u) {
      relative_acc_x_ = from.relative_acc_x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      relative_acc_y_ = from.relative_acc_y_;
    }
    if (cached_has_bits & 0x00000200u) {
      relative_acc_z_ = from.relative_acc_z_;
    }
    if (cached_has_bits & 0x00000400u) {
      object_type_ = from.object_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DynamicObstacleState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aw_simulation_obstacle.DynamicObstacleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicObstacleState::CopyFrom(const DynamicObstacleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aw_simulation_obstacle.DynamicObstacleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicObstacleState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(polygon_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(points_)) return false;
  return true;
}

void DynamicObstacleState::InternalSwap(DynamicObstacleState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  polygon_.InternalSwap(&other->polygon_);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DynamicObstacleState, object_type_)
      + sizeof(DynamicObstacleState::object_type_)
      - PROTOBUF_FIELD_OFFSET(DynamicObstacleState, nsecs_)>(
          reinterpret_cast<char*>(&nsecs_),
          reinterpret_cast<char*>(&other->nsecs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicObstacleState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DynamicObstacleStateList::InitAsDefaultInstance() {
}
class DynamicObstacleStateList::_Internal {
 public:
  using HasBits = decltype(std::declval<DynamicObstacleStateList>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

DynamicObstacleStateList::DynamicObstacleStateList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dynamic_obstacle_state_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aw_simulation_obstacle.DynamicObstacleStateList)
}
DynamicObstacleStateList::DynamicObstacleStateList(const DynamicObstacleStateList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      dynamic_obstacle_state_(from.dynamic_obstacle_state_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&id_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:aw_simulation_obstacle.DynamicObstacleStateList)
}

void DynamicObstacleStateList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DynamicObstacleStateList_dynamic_5fobstacle_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&id_)) + sizeof(yaw_));
}

DynamicObstacleStateList::~DynamicObstacleStateList() {
  // @@protoc_insertion_point(destructor:aw_simulation_obstacle.DynamicObstacleStateList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DynamicObstacleStateList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DynamicObstacleStateList::ArenaDtor(void* object) {
  DynamicObstacleStateList* _this = reinterpret_cast< DynamicObstacleStateList* >(object);
  (void)_this;
}
void DynamicObstacleStateList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DynamicObstacleStateList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynamicObstacleStateList& DynamicObstacleStateList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynamicObstacleStateList_dynamic_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void DynamicObstacleStateList::Clear() {
// @@protoc_insertion_point(message_clear_start:aw_simulation_obstacle.DynamicObstacleStateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dynamic_obstacle_state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_) -
        reinterpret_cast<char*>(&id_)) + sizeof(yaw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DynamicObstacleStateList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double yaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_yaw(&has_bits);
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .aw_simulation_obstacle.DynamicObstacleState dynamic_obstacle_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dynamic_obstacle_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicObstacleStateList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aw_simulation_obstacle.DynamicObstacleStateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // required double x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // required double y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // required double yaw = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_yaw(), target);
  }

  // repeated .aw_simulation_obstacle.DynamicObstacleState dynamic_obstacle_state = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dynamic_obstacle_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_dynamic_obstacle_state(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aw_simulation_obstacle.DynamicObstacleStateList)
  return target;
}

size_t DynamicObstacleStateList::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aw_simulation_obstacle.DynamicObstacleStateList)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (_internal_has_x()) {
    // required double x = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_y()) {
    // required double y = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_yaw()) {
    // required double yaw = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t DynamicObstacleStateList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aw_simulation_obstacle.DynamicObstacleStateList)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());

    // required double x = 2;
    total_size += 1 + 8;

    // required double y = 3;
    total_size += 1 + 8;

    // required double yaw = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aw_simulation_obstacle.DynamicObstacleState dynamic_obstacle_state = 5;
  total_size += 1UL * this->_internal_dynamic_obstacle_state_size();
  for (const auto& msg : this->dynamic_obstacle_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicObstacleStateList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aw_simulation_obstacle.DynamicObstacleStateList)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicObstacleStateList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynamicObstacleStateList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aw_simulation_obstacle.DynamicObstacleStateList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aw_simulation_obstacle.DynamicObstacleStateList)
    MergeFrom(*source);
  }
}

void DynamicObstacleStateList::MergeFrom(const DynamicObstacleStateList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aw_simulation_obstacle.DynamicObstacleStateList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dynamic_obstacle_state_.MergeFrom(from.dynamic_obstacle_state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      yaw_ = from.yaw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DynamicObstacleStateList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aw_simulation_obstacle.DynamicObstacleStateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicObstacleStateList::CopyFrom(const DynamicObstacleStateList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aw_simulation_obstacle.DynamicObstacleStateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicObstacleStateList::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(dynamic_obstacle_state_)) return false;
  return true;
}

void DynamicObstacleStateList::InternalSwap(DynamicObstacleStateList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dynamic_obstacle_state_.InternalSwap(&other->dynamic_obstacle_state_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DynamicObstacleStateList, yaw_)
      + sizeof(DynamicObstacleStateList::yaw_)
      - PROTOBUF_FIELD_OFFSET(DynamicObstacleStateList, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicObstacleStateList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace aw_simulation_obstacle
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aw_simulation_obstacle::DynamicObstacleState_Point* Arena::CreateMaybeMessage< ::aw_simulation_obstacle::DynamicObstacleState_Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aw_simulation_obstacle::DynamicObstacleState_Point >(arena);
}
template<> PROTOBUF_NOINLINE ::aw_simulation_obstacle::DynamicObstacleState* Arena::CreateMaybeMessage< ::aw_simulation_obstacle::DynamicObstacleState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aw_simulation_obstacle::DynamicObstacleState >(arena);
}
template<> PROTOBUF_NOINLINE ::aw_simulation_obstacle::DynamicObstacleStateList* Arena::CreateMaybeMessage< ::aw_simulation_obstacle::DynamicObstacleStateList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aw_simulation_obstacle::DynamicObstacleStateList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
