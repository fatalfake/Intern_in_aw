// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynamic_obstacle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dynamic_5fobstacle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dynamic_5fobstacle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dynamic_5fobstacle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dynamic_5fobstacle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dynamic_5fobstacle_2eproto;
namespace aw_simulation_obstacle {
class DynamicObstacleState;
class DynamicObstacleStateDefaultTypeInternal;
extern DynamicObstacleStateDefaultTypeInternal _DynamicObstacleState_default_instance_;
class DynamicObstacleStateList;
class DynamicObstacleStateListDefaultTypeInternal;
extern DynamicObstacleStateListDefaultTypeInternal _DynamicObstacleStateList_default_instance_;
class DynamicObstacleState_Point;
class DynamicObstacleState_PointDefaultTypeInternal;
extern DynamicObstacleState_PointDefaultTypeInternal _DynamicObstacleState_Point_default_instance_;
}  // namespace aw_simulation_obstacle
PROTOBUF_NAMESPACE_OPEN
template<> ::aw_simulation_obstacle::DynamicObstacleState* Arena::CreateMaybeMessage<::aw_simulation_obstacle::DynamicObstacleState>(Arena*);
template<> ::aw_simulation_obstacle::DynamicObstacleStateList* Arena::CreateMaybeMessage<::aw_simulation_obstacle::DynamicObstacleStateList>(Arena*);
template<> ::aw_simulation_obstacle::DynamicObstacleState_Point* Arena::CreateMaybeMessage<::aw_simulation_obstacle::DynamicObstacleState_Point>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace aw_simulation_obstacle {

// ===================================================================

class DynamicObstacleState_Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aw_simulation_obstacle.DynamicObstacleState.Point) */ {
 public:
  inline DynamicObstacleState_Point() : DynamicObstacleState_Point(nullptr) {}
  virtual ~DynamicObstacleState_Point();

  DynamicObstacleState_Point(const DynamicObstacleState_Point& from);
  DynamicObstacleState_Point(DynamicObstacleState_Point&& from) noexcept
    : DynamicObstacleState_Point() {
    *this = ::std::move(from);
  }

  inline DynamicObstacleState_Point& operator=(const DynamicObstacleState_Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicObstacleState_Point& operator=(DynamicObstacleState_Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DynamicObstacleState_Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynamicObstacleState_Point* internal_default_instance() {
    return reinterpret_cast<const DynamicObstacleState_Point*>(
               &_DynamicObstacleState_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DynamicObstacleState_Point& a, DynamicObstacleState_Point& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicObstacleState_Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DynamicObstacleState_Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynamicObstacleState_Point* New() const final {
    return CreateMaybeMessage<DynamicObstacleState_Point>(nullptr);
  }

  DynamicObstacleState_Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynamicObstacleState_Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DynamicObstacleState_Point& from);
  void MergeFrom(const DynamicObstacleState_Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicObstacleState_Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aw_simulation_obstacle.DynamicObstacleState.Point";
  }
  protected:
  explicit DynamicObstacleState_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dynamic_5fobstacle_2eproto);
    return ::descriptor_table_dynamic_5fobstacle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // required double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // required double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // required double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:aw_simulation_obstacle.DynamicObstacleState.Point)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::TableStruct_dynamic_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class DynamicObstacleState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aw_simulation_obstacle.DynamicObstacleState) */ {
 public:
  inline DynamicObstacleState() : DynamicObstacleState(nullptr) {}
  virtual ~DynamicObstacleState();

  DynamicObstacleState(const DynamicObstacleState& from);
  DynamicObstacleState(DynamicObstacleState&& from) noexcept
    : DynamicObstacleState() {
    *this = ::std::move(from);
  }

  inline DynamicObstacleState& operator=(const DynamicObstacleState& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicObstacleState& operator=(DynamicObstacleState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DynamicObstacleState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynamicObstacleState* internal_default_instance() {
    return reinterpret_cast<const DynamicObstacleState*>(
               &_DynamicObstacleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DynamicObstacleState& a, DynamicObstacleState& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicObstacleState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DynamicObstacleState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynamicObstacleState* New() const final {
    return CreateMaybeMessage<DynamicObstacleState>(nullptr);
  }

  DynamicObstacleState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynamicObstacleState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DynamicObstacleState& from);
  void MergeFrom(const DynamicObstacleState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicObstacleState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aw_simulation_obstacle.DynamicObstacleState";
  }
  protected:
  explicit DynamicObstacleState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dynamic_5fobstacle_2eproto);
    return ::descriptor_table_dynamic_5fobstacle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DynamicObstacleState_Point Point;

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonFieldNumber = 5,
    kPointsFieldNumber = 13,
    kNsecsFieldNumber = 1,
    kRobotXFieldNumber = 2,
    kRobotYFieldNumber = 3,
    kRobotZFieldNumber = 4,
    kRelativeVeloXFieldNumber = 6,
    kRelativeVeloYFieldNumber = 7,
    kRelativeVeloZFieldNumber = 8,
    kRelativeAccXFieldNumber = 9,
    kRelativeAccYFieldNumber = 10,
    kRelativeAccZFieldNumber = 11,
    kObjectTypeFieldNumber = 12,
  };
  // repeated .aw_simulation_obstacle.DynamicObstacleState.Point polygon = 5;
  int polygon_size() const;
  private:
  int _internal_polygon_size() const;
  public:
  void clear_polygon();
  ::aw_simulation_obstacle::DynamicObstacleState_Point* mutable_polygon(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aw_simulation_obstacle::DynamicObstacleState_Point >*
      mutable_polygon();
  private:
  const ::aw_simulation_obstacle::DynamicObstacleState_Point& _internal_polygon(int index) const;
  ::aw_simulation_obstacle::DynamicObstacleState_Point* _internal_add_polygon();
  public:
  const ::aw_simulation_obstacle::DynamicObstacleState_Point& polygon(int index) const;
  ::aw_simulation_obstacle::DynamicObstacleState_Point* add_polygon();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aw_simulation_obstacle::DynamicObstacleState_Point >&
      polygon() const;

  // repeated .aw_simulation_obstacle.DynamicObstacleState.Point points = 13;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::aw_simulation_obstacle::DynamicObstacleState_Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aw_simulation_obstacle::DynamicObstacleState_Point >*
      mutable_points();
  private:
  const ::aw_simulation_obstacle::DynamicObstacleState_Point& _internal_points(int index) const;
  ::aw_simulation_obstacle::DynamicObstacleState_Point* _internal_add_points();
  public:
  const ::aw_simulation_obstacle::DynamicObstacleState_Point& points(int index) const;
  ::aw_simulation_obstacle::DynamicObstacleState_Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aw_simulation_obstacle::DynamicObstacleState_Point >&
      points() const;

  // required uint64 nsecs = 1;
  bool has_nsecs() const;
  private:
  bool _internal_has_nsecs() const;
  public:
  void clear_nsecs();
  ::PROTOBUF_NAMESPACE_ID::uint64 nsecs() const;
  void set_nsecs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nsecs() const;
  void _internal_set_nsecs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required double robot_x = 2;
  bool has_robot_x() const;
  private:
  bool _internal_has_robot_x() const;
  public:
  void clear_robot_x();
  double robot_x() const;
  void set_robot_x(double value);
  private:
  double _internal_robot_x() const;
  void _internal_set_robot_x(double value);
  public:

  // required double robot_y = 3;
  bool has_robot_y() const;
  private:
  bool _internal_has_robot_y() const;
  public:
  void clear_robot_y();
  double robot_y() const;
  void set_robot_y(double value);
  private:
  double _internal_robot_y() const;
  void _internal_set_robot_y(double value);
  public:

  // required double robot_z = 4;
  bool has_robot_z() const;
  private:
  bool _internal_has_robot_z() const;
  public:
  void clear_robot_z();
  double robot_z() const;
  void set_robot_z(double value);
  private:
  double _internal_robot_z() const;
  void _internal_set_robot_z(double value);
  public:

  // optional double relative_velo_x = 6;
  bool has_relative_velo_x() const;
  private:
  bool _internal_has_relative_velo_x() const;
  public:
  void clear_relative_velo_x();
  double relative_velo_x() const;
  void set_relative_velo_x(double value);
  private:
  double _internal_relative_velo_x() const;
  void _internal_set_relative_velo_x(double value);
  public:

  // optional double relative_velo_y = 7;
  bool has_relative_velo_y() const;
  private:
  bool _internal_has_relative_velo_y() const;
  public:
  void clear_relative_velo_y();
  double relative_velo_y() const;
  void set_relative_velo_y(double value);
  private:
  double _internal_relative_velo_y() const;
  void _internal_set_relative_velo_y(double value);
  public:

  // optional double relative_velo_z = 8;
  bool has_relative_velo_z() const;
  private:
  bool _internal_has_relative_velo_z() const;
  public:
  void clear_relative_velo_z();
  double relative_velo_z() const;
  void set_relative_velo_z(double value);
  private:
  double _internal_relative_velo_z() const;
  void _internal_set_relative_velo_z(double value);
  public:

  // optional double relative_acc_x = 9;
  bool has_relative_acc_x() const;
  private:
  bool _internal_has_relative_acc_x() const;
  public:
  void clear_relative_acc_x();
  double relative_acc_x() const;
  void set_relative_acc_x(double value);
  private:
  double _internal_relative_acc_x() const;
  void _internal_set_relative_acc_x(double value);
  public:

  // optional double relative_acc_y = 10;
  bool has_relative_acc_y() const;
  private:
  bool _internal_has_relative_acc_y() const;
  public:
  void clear_relative_acc_y();
  double relative_acc_y() const;
  void set_relative_acc_y(double value);
  private:
  double _internal_relative_acc_y() const;
  void _internal_set_relative_acc_y(double value);
  public:

  // optional double relative_acc_z = 11;
  bool has_relative_acc_z() const;
  private:
  bool _internal_has_relative_acc_z() const;
  public:
  void clear_relative_acc_z();
  double relative_acc_z() const;
  void set_relative_acc_z(double value);
  private:
  double _internal_relative_acc_z() const;
  void _internal_set_relative_acc_z(double value);
  public:

  // optional int32 object_type = 12;
  bool has_object_type() const;
  private:
  bool _internal_has_object_type() const;
  public:
  void clear_object_type();
  ::PROTOBUF_NAMESPACE_ID::int32 object_type() const;
  void set_object_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_object_type() const;
  void _internal_set_object_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:aw_simulation_obstacle.DynamicObstacleState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aw_simulation_obstacle::DynamicObstacleState_Point > polygon_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aw_simulation_obstacle::DynamicObstacleState_Point > points_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nsecs_;
  double robot_x_;
  double robot_y_;
  double robot_z_;
  double relative_velo_x_;
  double relative_velo_y_;
  double relative_velo_z_;
  double relative_acc_x_;
  double relative_acc_y_;
  double relative_acc_z_;
  ::PROTOBUF_NAMESPACE_ID::int32 object_type_;
  friend struct ::TableStruct_dynamic_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class DynamicObstacleStateList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aw_simulation_obstacle.DynamicObstacleStateList) */ {
 public:
  inline DynamicObstacleStateList() : DynamicObstacleStateList(nullptr) {}
  virtual ~DynamicObstacleStateList();

  DynamicObstacleStateList(const DynamicObstacleStateList& from);
  DynamicObstacleStateList(DynamicObstacleStateList&& from) noexcept
    : DynamicObstacleStateList() {
    *this = ::std::move(from);
  }

  inline DynamicObstacleStateList& operator=(const DynamicObstacleStateList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicObstacleStateList& operator=(DynamicObstacleStateList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DynamicObstacleStateList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynamicObstacleStateList* internal_default_instance() {
    return reinterpret_cast<const DynamicObstacleStateList*>(
               &_DynamicObstacleStateList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DynamicObstacleStateList& a, DynamicObstacleStateList& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicObstacleStateList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DynamicObstacleStateList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynamicObstacleStateList* New() const final {
    return CreateMaybeMessage<DynamicObstacleStateList>(nullptr);
  }

  DynamicObstacleStateList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynamicObstacleStateList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DynamicObstacleStateList& from);
  void MergeFrom(const DynamicObstacleStateList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicObstacleStateList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aw_simulation_obstacle.DynamicObstacleStateList";
  }
  protected:
  explicit DynamicObstacleStateList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dynamic_5fobstacle_2eproto);
    return ::descriptor_table_dynamic_5fobstacle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDynamicObstacleStateFieldNumber = 5,
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kYawFieldNumber = 4,
  };
  // repeated .aw_simulation_obstacle.DynamicObstacleState dynamic_obstacle_state = 5;
  int dynamic_obstacle_state_size() const;
  private:
  int _internal_dynamic_obstacle_state_size() const;
  public:
  void clear_dynamic_obstacle_state();
  ::aw_simulation_obstacle::DynamicObstacleState* mutable_dynamic_obstacle_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aw_simulation_obstacle::DynamicObstacleState >*
      mutable_dynamic_obstacle_state();
  private:
  const ::aw_simulation_obstacle::DynamicObstacleState& _internal_dynamic_obstacle_state(int index) const;
  ::aw_simulation_obstacle::DynamicObstacleState* _internal_add_dynamic_obstacle_state();
  public:
  const ::aw_simulation_obstacle::DynamicObstacleState& dynamic_obstacle_state(int index) const;
  ::aw_simulation_obstacle::DynamicObstacleState* add_dynamic_obstacle_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aw_simulation_obstacle::DynamicObstacleState >&
      dynamic_obstacle_state() const;

  // required uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required double x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // required double y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // required double yaw = 4;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // @@protoc_insertion_point(class_scope:aw_simulation_obstacle.DynamicObstacleStateList)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aw_simulation_obstacle::DynamicObstacleState > dynamic_obstacle_state_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  double x_;
  double y_;
  double yaw_;
  friend struct ::TableStruct_dynamic_5fobstacle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DynamicObstacleState_Point

// required double x = 1;
inline bool DynamicObstacleState_Point::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DynamicObstacleState_Point::has_x() const {
  return _internal_has_x();
}
inline void DynamicObstacleState_Point::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double DynamicObstacleState_Point::_internal_x() const {
  return x_;
}
inline double DynamicObstacleState_Point::x() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleState.Point.x)
  return _internal_x();
}
inline void DynamicObstacleState_Point::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void DynamicObstacleState_Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleState.Point.x)
}

// required double y = 2;
inline bool DynamicObstacleState_Point::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DynamicObstacleState_Point::has_y() const {
  return _internal_has_y();
}
inline void DynamicObstacleState_Point::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DynamicObstacleState_Point::_internal_y() const {
  return y_;
}
inline double DynamicObstacleState_Point::y() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleState.Point.y)
  return _internal_y();
}
inline void DynamicObstacleState_Point::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void DynamicObstacleState_Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleState.Point.y)
}

// required double z = 3;
inline bool DynamicObstacleState_Point::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DynamicObstacleState_Point::has_z() const {
  return _internal_has_z();
}
inline void DynamicObstacleState_Point::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double DynamicObstacleState_Point::_internal_z() const {
  return z_;
}
inline double DynamicObstacleState_Point::z() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleState.Point.z)
  return _internal_z();
}
inline void DynamicObstacleState_Point::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void DynamicObstacleState_Point::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleState.Point.z)
}

// -------------------------------------------------------------------

// DynamicObstacleState

// required uint64 nsecs = 1;
inline bool DynamicObstacleState::_internal_has_nsecs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DynamicObstacleState::has_nsecs() const {
  return _internal_has_nsecs();
}
inline void DynamicObstacleState::clear_nsecs() {
  nsecs_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DynamicObstacleState::_internal_nsecs() const {
  return nsecs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DynamicObstacleState::nsecs() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleState.nsecs)
  return _internal_nsecs();
}
inline void DynamicObstacleState::_internal_set_nsecs(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  nsecs_ = value;
}
inline void DynamicObstacleState::set_nsecs(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nsecs(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleState.nsecs)
}

// required double robot_x = 2;
inline bool DynamicObstacleState::_internal_has_robot_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DynamicObstacleState::has_robot_x() const {
  return _internal_has_robot_x();
}
inline void DynamicObstacleState::clear_robot_x() {
  robot_x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DynamicObstacleState::_internal_robot_x() const {
  return robot_x_;
}
inline double DynamicObstacleState::robot_x() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleState.robot_x)
  return _internal_robot_x();
}
inline void DynamicObstacleState::_internal_set_robot_x(double value) {
  _has_bits_[0] |= 0x00000002u;
  robot_x_ = value;
}
inline void DynamicObstacleState::set_robot_x(double value) {
  _internal_set_robot_x(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleState.robot_x)
}

// required double robot_y = 3;
inline bool DynamicObstacleState::_internal_has_robot_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DynamicObstacleState::has_robot_y() const {
  return _internal_has_robot_y();
}
inline void DynamicObstacleState::clear_robot_y() {
  robot_y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double DynamicObstacleState::_internal_robot_y() const {
  return robot_y_;
}
inline double DynamicObstacleState::robot_y() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleState.robot_y)
  return _internal_robot_y();
}
inline void DynamicObstacleState::_internal_set_robot_y(double value) {
  _has_bits_[0] |= 0x00000004u;
  robot_y_ = value;
}
inline void DynamicObstacleState::set_robot_y(double value) {
  _internal_set_robot_y(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleState.robot_y)
}

// required double robot_z = 4;
inline bool DynamicObstacleState::_internal_has_robot_z() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DynamicObstacleState::has_robot_z() const {
  return _internal_has_robot_z();
}
inline void DynamicObstacleState::clear_robot_z() {
  robot_z_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double DynamicObstacleState::_internal_robot_z() const {
  return robot_z_;
}
inline double DynamicObstacleState::robot_z() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleState.robot_z)
  return _internal_robot_z();
}
inline void DynamicObstacleState::_internal_set_robot_z(double value) {
  _has_bits_[0] |= 0x00000008u;
  robot_z_ = value;
}
inline void DynamicObstacleState::set_robot_z(double value) {
  _internal_set_robot_z(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleState.robot_z)
}

// repeated .aw_simulation_obstacle.DynamicObstacleState.Point polygon = 5;
inline int DynamicObstacleState::_internal_polygon_size() const {
  return polygon_.size();
}
inline int DynamicObstacleState::polygon_size() const {
  return _internal_polygon_size();
}
inline void DynamicObstacleState::clear_polygon() {
  polygon_.Clear();
}
inline ::aw_simulation_obstacle::DynamicObstacleState_Point* DynamicObstacleState::mutable_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:aw_simulation_obstacle.DynamicObstacleState.polygon)
  return polygon_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aw_simulation_obstacle::DynamicObstacleState_Point >*
DynamicObstacleState::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable_list:aw_simulation_obstacle.DynamicObstacleState.polygon)
  return &polygon_;
}
inline const ::aw_simulation_obstacle::DynamicObstacleState_Point& DynamicObstacleState::_internal_polygon(int index) const {
  return polygon_.Get(index);
}
inline const ::aw_simulation_obstacle::DynamicObstacleState_Point& DynamicObstacleState::polygon(int index) const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleState.polygon)
  return _internal_polygon(index);
}
inline ::aw_simulation_obstacle::DynamicObstacleState_Point* DynamicObstacleState::_internal_add_polygon() {
  return polygon_.Add();
}
inline ::aw_simulation_obstacle::DynamicObstacleState_Point* DynamicObstacleState::add_polygon() {
  // @@protoc_insertion_point(field_add:aw_simulation_obstacle.DynamicObstacleState.polygon)
  return _internal_add_polygon();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aw_simulation_obstacle::DynamicObstacleState_Point >&
DynamicObstacleState::polygon() const {
  // @@protoc_insertion_point(field_list:aw_simulation_obstacle.DynamicObstacleState.polygon)
  return polygon_;
}

// optional double relative_velo_x = 6;
inline bool DynamicObstacleState::_internal_has_relative_velo_x() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DynamicObstacleState::has_relative_velo_x() const {
  return _internal_has_relative_velo_x();
}
inline void DynamicObstacleState::clear_relative_velo_x() {
  relative_velo_x_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double DynamicObstacleState::_internal_relative_velo_x() const {
  return relative_velo_x_;
}
inline double DynamicObstacleState::relative_velo_x() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleState.relative_velo_x)
  return _internal_relative_velo_x();
}
inline void DynamicObstacleState::_internal_set_relative_velo_x(double value) {
  _has_bits_[0] |= 0x00000010u;
  relative_velo_x_ = value;
}
inline void DynamicObstacleState::set_relative_velo_x(double value) {
  _internal_set_relative_velo_x(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleState.relative_velo_x)
}

// optional double relative_velo_y = 7;
inline bool DynamicObstacleState::_internal_has_relative_velo_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DynamicObstacleState::has_relative_velo_y() const {
  return _internal_has_relative_velo_y();
}
inline void DynamicObstacleState::clear_relative_velo_y() {
  relative_velo_y_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double DynamicObstacleState::_internal_relative_velo_y() const {
  return relative_velo_y_;
}
inline double DynamicObstacleState::relative_velo_y() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleState.relative_velo_y)
  return _internal_relative_velo_y();
}
inline void DynamicObstacleState::_internal_set_relative_velo_y(double value) {
  _has_bits_[0] |= 0x00000020u;
  relative_velo_y_ = value;
}
inline void DynamicObstacleState::set_relative_velo_y(double value) {
  _internal_set_relative_velo_y(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleState.relative_velo_y)
}

// optional double relative_velo_z = 8;
inline bool DynamicObstacleState::_internal_has_relative_velo_z() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DynamicObstacleState::has_relative_velo_z() const {
  return _internal_has_relative_velo_z();
}
inline void DynamicObstacleState::clear_relative_velo_z() {
  relative_velo_z_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double DynamicObstacleState::_internal_relative_velo_z() const {
  return relative_velo_z_;
}
inline double DynamicObstacleState::relative_velo_z() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleState.relative_velo_z)
  return _internal_relative_velo_z();
}
inline void DynamicObstacleState::_internal_set_relative_velo_z(double value) {
  _has_bits_[0] |= 0x00000040u;
  relative_velo_z_ = value;
}
inline void DynamicObstacleState::set_relative_velo_z(double value) {
  _internal_set_relative_velo_z(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleState.relative_velo_z)
}

// optional double relative_acc_x = 9;
inline bool DynamicObstacleState::_internal_has_relative_acc_x() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DynamicObstacleState::has_relative_acc_x() const {
  return _internal_has_relative_acc_x();
}
inline void DynamicObstacleState::clear_relative_acc_x() {
  relative_acc_x_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double DynamicObstacleState::_internal_relative_acc_x() const {
  return relative_acc_x_;
}
inline double DynamicObstacleState::relative_acc_x() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleState.relative_acc_x)
  return _internal_relative_acc_x();
}
inline void DynamicObstacleState::_internal_set_relative_acc_x(double value) {
  _has_bits_[0] |= 0x00000080u;
  relative_acc_x_ = value;
}
inline void DynamicObstacleState::set_relative_acc_x(double value) {
  _internal_set_relative_acc_x(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleState.relative_acc_x)
}

// optional double relative_acc_y = 10;
inline bool DynamicObstacleState::_internal_has_relative_acc_y() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DynamicObstacleState::has_relative_acc_y() const {
  return _internal_has_relative_acc_y();
}
inline void DynamicObstacleState::clear_relative_acc_y() {
  relative_acc_y_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double DynamicObstacleState::_internal_relative_acc_y() const {
  return relative_acc_y_;
}
inline double DynamicObstacleState::relative_acc_y() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleState.relative_acc_y)
  return _internal_relative_acc_y();
}
inline void DynamicObstacleState::_internal_set_relative_acc_y(double value) {
  _has_bits_[0] |= 0x00000100u;
  relative_acc_y_ = value;
}
inline void DynamicObstacleState::set_relative_acc_y(double value) {
  _internal_set_relative_acc_y(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleState.relative_acc_y)
}

// optional double relative_acc_z = 11;
inline bool DynamicObstacleState::_internal_has_relative_acc_z() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DynamicObstacleState::has_relative_acc_z() const {
  return _internal_has_relative_acc_z();
}
inline void DynamicObstacleState::clear_relative_acc_z() {
  relative_acc_z_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double DynamicObstacleState::_internal_relative_acc_z() const {
  return relative_acc_z_;
}
inline double DynamicObstacleState::relative_acc_z() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleState.relative_acc_z)
  return _internal_relative_acc_z();
}
inline void DynamicObstacleState::_internal_set_relative_acc_z(double value) {
  _has_bits_[0] |= 0x00000200u;
  relative_acc_z_ = value;
}
inline void DynamicObstacleState::set_relative_acc_z(double value) {
  _internal_set_relative_acc_z(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleState.relative_acc_z)
}

// optional int32 object_type = 12;
inline bool DynamicObstacleState::_internal_has_object_type() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DynamicObstacleState::has_object_type() const {
  return _internal_has_object_type();
}
inline void DynamicObstacleState::clear_object_type() {
  object_type_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicObstacleState::_internal_object_type() const {
  return object_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicObstacleState::object_type() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleState.object_type)
  return _internal_object_type();
}
inline void DynamicObstacleState::_internal_set_object_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  object_type_ = value;
}
inline void DynamicObstacleState::set_object_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_object_type(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleState.object_type)
}

// repeated .aw_simulation_obstacle.DynamicObstacleState.Point points = 13;
inline int DynamicObstacleState::_internal_points_size() const {
  return points_.size();
}
inline int DynamicObstacleState::points_size() const {
  return _internal_points_size();
}
inline void DynamicObstacleState::clear_points() {
  points_.Clear();
}
inline ::aw_simulation_obstacle::DynamicObstacleState_Point* DynamicObstacleState::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:aw_simulation_obstacle.DynamicObstacleState.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aw_simulation_obstacle::DynamicObstacleState_Point >*
DynamicObstacleState::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:aw_simulation_obstacle.DynamicObstacleState.points)
  return &points_;
}
inline const ::aw_simulation_obstacle::DynamicObstacleState_Point& DynamicObstacleState::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::aw_simulation_obstacle::DynamicObstacleState_Point& DynamicObstacleState::points(int index) const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleState.points)
  return _internal_points(index);
}
inline ::aw_simulation_obstacle::DynamicObstacleState_Point* DynamicObstacleState::_internal_add_points() {
  return points_.Add();
}
inline ::aw_simulation_obstacle::DynamicObstacleState_Point* DynamicObstacleState::add_points() {
  // @@protoc_insertion_point(field_add:aw_simulation_obstacle.DynamicObstacleState.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aw_simulation_obstacle::DynamicObstacleState_Point >&
DynamicObstacleState::points() const {
  // @@protoc_insertion_point(field_list:aw_simulation_obstacle.DynamicObstacleState.points)
  return points_;
}

// -------------------------------------------------------------------

// DynamicObstacleStateList

// required uint64 id = 1;
inline bool DynamicObstacleStateList::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DynamicObstacleStateList::has_id() const {
  return _internal_has_id();
}
inline void DynamicObstacleStateList::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DynamicObstacleStateList::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DynamicObstacleStateList::id() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleStateList.id)
  return _internal_id();
}
inline void DynamicObstacleStateList::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void DynamicObstacleStateList::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleStateList.id)
}

// required double x = 2;
inline bool DynamicObstacleStateList::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DynamicObstacleStateList::has_x() const {
  return _internal_has_x();
}
inline void DynamicObstacleStateList::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DynamicObstacleStateList::_internal_x() const {
  return x_;
}
inline double DynamicObstacleStateList::x() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleStateList.x)
  return _internal_x();
}
inline void DynamicObstacleStateList::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void DynamicObstacleStateList::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleStateList.x)
}

// required double y = 3;
inline bool DynamicObstacleStateList::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DynamicObstacleStateList::has_y() const {
  return _internal_has_y();
}
inline void DynamicObstacleStateList::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double DynamicObstacleStateList::_internal_y() const {
  return y_;
}
inline double DynamicObstacleStateList::y() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleStateList.y)
  return _internal_y();
}
inline void DynamicObstacleStateList::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void DynamicObstacleStateList::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleStateList.y)
}

// required double yaw = 4;
inline bool DynamicObstacleStateList::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DynamicObstacleStateList::has_yaw() const {
  return _internal_has_yaw();
}
inline void DynamicObstacleStateList::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double DynamicObstacleStateList::_internal_yaw() const {
  return yaw_;
}
inline double DynamicObstacleStateList::yaw() const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleStateList.yaw)
  return _internal_yaw();
}
inline void DynamicObstacleStateList::_internal_set_yaw(double value) {
  _has_bits_[0] |= 0x00000008u;
  yaw_ = value;
}
inline void DynamicObstacleStateList::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:aw_simulation_obstacle.DynamicObstacleStateList.yaw)
}

// repeated .aw_simulation_obstacle.DynamicObstacleState dynamic_obstacle_state = 5;
inline int DynamicObstacleStateList::_internal_dynamic_obstacle_state_size() const {
  return dynamic_obstacle_state_.size();
}
inline int DynamicObstacleStateList::dynamic_obstacle_state_size() const {
  return _internal_dynamic_obstacle_state_size();
}
inline void DynamicObstacleStateList::clear_dynamic_obstacle_state() {
  dynamic_obstacle_state_.Clear();
}
inline ::aw_simulation_obstacle::DynamicObstacleState* DynamicObstacleStateList::mutable_dynamic_obstacle_state(int index) {
  // @@protoc_insertion_point(field_mutable:aw_simulation_obstacle.DynamicObstacleStateList.dynamic_obstacle_state)
  return dynamic_obstacle_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aw_simulation_obstacle::DynamicObstacleState >*
DynamicObstacleStateList::mutable_dynamic_obstacle_state() {
  // @@protoc_insertion_point(field_mutable_list:aw_simulation_obstacle.DynamicObstacleStateList.dynamic_obstacle_state)
  return &dynamic_obstacle_state_;
}
inline const ::aw_simulation_obstacle::DynamicObstacleState& DynamicObstacleStateList::_internal_dynamic_obstacle_state(int index) const {
  return dynamic_obstacle_state_.Get(index);
}
inline const ::aw_simulation_obstacle::DynamicObstacleState& DynamicObstacleStateList::dynamic_obstacle_state(int index) const {
  // @@protoc_insertion_point(field_get:aw_simulation_obstacle.DynamicObstacleStateList.dynamic_obstacle_state)
  return _internal_dynamic_obstacle_state(index);
}
inline ::aw_simulation_obstacle::DynamicObstacleState* DynamicObstacleStateList::_internal_add_dynamic_obstacle_state() {
  return dynamic_obstacle_state_.Add();
}
inline ::aw_simulation_obstacle::DynamicObstacleState* DynamicObstacleStateList::add_dynamic_obstacle_state() {
  // @@protoc_insertion_point(field_add:aw_simulation_obstacle.DynamicObstacleStateList.dynamic_obstacle_state)
  return _internal_add_dynamic_obstacle_state();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aw_simulation_obstacle::DynamicObstacleState >&
DynamicObstacleStateList::dynamic_obstacle_state() const {
  // @@protoc_insertion_point(field_list:aw_simulation_obstacle.DynamicObstacleStateList.dynamic_obstacle_state)
  return dynamic_obstacle_state_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace aw_simulation_obstacle

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dynamic_5fobstacle_2eproto
